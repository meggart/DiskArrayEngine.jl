import{_ as l,C as o,c as p,o as u,j as i,a as t,aA as a,G as n,w as r}from"./chunks/framework.Cd50F0Gi.js";const L=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),d={name:"api.md"},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""};function N(S,s,z,R,G,V){const e=o("Badge");return u(),p("div",null,[s[96]||(s[96]=i("h1",{id:"API-Reference",tabindex:"-1"},[t("API Reference "),i("a",{class:"header-anchor",href:"#API-Reference","aria-label":'Permalink to "API Reference {#API-Reference}"'},"​")],-1)),s[97]||(s[97]=i("p",null,"This section describes all available functions of this package.",-1)),s[98]||(s[98]=i("h2",{id:"Public-API",tabindex:"-1"},[t("Public API "),i("a",{class:"header-anchor",href:"#Public-API","aria-label":'Permalink to "Public API {#Public-API}"'},"​")],-1)),i("details",g,[i("summary",null,[s[0]||(s[0]=i("a",{id:"DiskArrayEngine.GMDWop",href:"#DiskArrayEngine.GMDWop"},[i("span",{class:"jlbinding"},"DiskArrayEngine.GMDWop")],-1)),s[1]||(s[1]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GMDWop{N,I,O,F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UserOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,SPL}</span></span></code></pre></div><p>A struct representing a generalized multi-dimensional windowed operation.</p><p><strong>Fields</strong></p><ul><li><p><code>inars::I</code>: Tuple or collection of input arrays, each wrapped as <code>InputArray</code>.</p></li><li><p><code>outspecs::O</code>: Tuple or collection of output array specifications.</p></li><li><p><code>f::F</code>: The user-supplied operation, typically a UserFunc returned by <code>create_userfunction</code>.</p></li><li><p><code>windowsize::NTuple{N,Int}</code>: The number of windows along each loop dimension.</p></li><li><p><code>lspl::SPL</code>: Loop splitter object or <code>nothing</code>, used for parallelization or block processing.</p></li></ul><p><strong>Description</strong></p><p><code>GMDWop</code> encapsulates all information required to perform a lazy windowed operation over multiple input arrays and produce one or more outputs. It manages the mapping between logical loop dimensions and physical array dimensions, window sizes, and any loop splitting for efficient computation.</p><p>Construct using <code>GMDWop(inars, outspecs, f)</code>, where <code>inars</code> and <code>outspecs</code> are collections of input and output specifications, and <code>f</code> is the user operation.</p>',7)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i("details",k,[i("summary",null,[s[4]||(s[4]=i("a",{id:"DiskArrayEngine.interpolate_diskarray-Tuple{Any, Any}",href:"#DiskArrayEngine.interpolate_diskarray-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.interpolate_diskarray")],-1)),s[5]||(s[5]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">interpolate_diskarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, conv)</span></span></code></pre></div><p>Function to interpolate a diskarray along one or more dimensions. The interpolation is specifed by the list <code>conv</code> consisting of pairs of <code>dim_index =&gt; (source_axis,dest_axis)</code> values. For example, to interpolate an input array with dimensions (x,y,t) to new coordinates (x2,y2,t2) you can do</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Old coordinates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#source coordinates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#target coordinates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> interpolate_diskarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,x2),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y,y2)))</span></span></code></pre></div>`,3)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s[99]||(s[99]=i("h2",{id:"Internal-API",tabindex:"-1"},[t("Internal API "),i("a",{class:"header-anchor",href:"#Internal-API","aria-label":'Permalink to "Internal API {#Internal-API}"'},"​")],-1)),i("details",y,[i("summary",null,[s[8]||(s[8]=i("a",{id:"DiskArrayEngine.EmptyInput",href:"#DiskArrayEngine.EmptyInput"},[i("span",{class:"jlbinding"},"DiskArrayEngine.EmptyInput")],-1)),s[9]||(s[9]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EmptyInput</span></span></code></pre></div><p>A kind of placeholder array generating an artificial input in the DAG graph, which only gets filled during the computation. Mainly used to reserve an input buffer.</p>',2)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i("details",h,[i("summary",null,[s[12]||(s[12]=i("a",{id:"DiskArrayEngine.Input",href:"#DiskArrayEngine.Input"},[i("span",{class:"jlbinding"},"DiskArrayEngine.Input")],-1)),s[13]||(s[13]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=i("p",null,"Type used for dispatch to show something is done in input mode",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[14]||(s[14]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),i("details",f,[i("summary",null,[s[16]||(s[16]=i("a",{id:"DiskArrayEngine.LoopWindows",href:"#DiskArrayEngine.LoopWindows"},[i("span",{class:"jlbinding"},"DiskArrayEngine.LoopWindows")],-1)),s[17]||(s[17]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=i("p",null,"Struct specifying the windows of a participating array along each dimension as well as the loop axes where this array participates in the loop",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),i("details",A,[i("summary",null,[s[20]||(s[20]=i("a",{id:"DiskArrayEngine.Output",href:"#DiskArrayEngine.Output"},[i("span",{class:"jlbinding"},"DiskArrayEngine.Output")],-1)),s[21]||(s[21]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=i("p",null,"Type used for dispatch to show something is done in output mode",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[22]||(s[22]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),i("details",b,[i("summary",null,[s[24]||(s[24]=i("a",{id:"DiskArrayEngine.ProductArray",href:"#DiskArrayEngine.ProductArray"},[i("span",{class:"jlbinding"},"DiskArrayEngine.ProductArray")],-1)),s[25]||(s[25]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=i("p",null,[t("Type very similar to "),i("code",null,"Iterators.product"),t(", but for indexable arrays.")],-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[26]||(s[26]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),i("details",m,[i("summary",null,[s[28]||(s[28]=i("a",{id:"DiskArrayEngine.WindowGroup",href:"#DiskArrayEngine.WindowGroup"},[i("span",{class:"jlbinding"},"DiskArrayEngine.WindowGroup")],-1)),s[29]||(s[29]=t()),n(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=i("p",null,"A group of window steps merged together in a block operation",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[30]||(s[30]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),i("details",E,[i("summary",null,[s[32]||(s[32]=i("a",{id:"DiskArrayEngine.apparent_chunksize-Tuple{InputArray}",href:"#DiskArrayEngine.apparent_chunksize-Tuple{InputArray}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.apparent_chunksize")],-1)),s[33]||(s[33]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=i("p",null,"Given the loop windows of an input array estimate the apparent chunks along an axis given the underlying chunks.",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[34]||(s[34]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),i("details",j,[i("summary",null,[s[36]||(s[36]=i("a",{id:"DiskArrayEngine.bufferrepeat-Tuple{Any, Any, Any}",href:"#DiskArrayEngine.bufferrepeat-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.bufferrepeat")],-1)),s[37]||(s[37]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=i("p",null,"Compute how often a buffer needs to be passed to the computation before it can be flushed to the output array",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[38]||(s[38]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),i("details",D,[i("summary",null,[s[40]||(s[40]=i("a",{id:"DiskArrayEngine.clean_aggregator-Tuple{DiskArrayEngine.OutputAggregator}",href:"#DiskArrayEngine.clean_aggregator-Tuple{DiskArrayEngine.OutputAggregator}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.clean_aggregator")],-1)),s[41]||(s[41]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=i("p",null,"Removes all outout buffers from an output aggregator that have been successfully put to disk",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[42]||(s[42]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),i("details",c,[i("summary",null,[s[44]||(s[44]=i("a",{id:"DiskArrayEngine.domain_from_chunktype-Tuple{Any}",href:"#DiskArrayEngine.domain_from_chunktype-Tuple{Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.domain_from_chunktype")],-1)),s[45]||(s[45]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=i("p",null,[t("Returns the full domain that a "),i("code",null,"DiskArrays.ChunkVector"),t(" object covers as a unit range")],-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[46]||(s[46]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),i("details",T,[i("summary",null,[s[48]||(s[48]=i("a",{id:"DiskArrayEngine.extract_outbuffer-Tuple{Any, Any, Any, Any, DiskArrayEngine.OutputAggregator}",href:"#DiskArrayEngine.extract_outbuffer-Tuple{Any, Any, Any, Any, DiskArrayEngine.OutputAggregator}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.extract_outbuffer")],-1)),s[49]||(s[49]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=i("p",null,"Extracts or creates output buffer as an ArrayBuffer",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[50]||(s[50]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),i("details",x,[i("summary",null,[s[52]||(s[52]=i("a",{id:"DiskArrayEngine.fix_output_overlap-Tuple{Any, Any}",href:"#DiskArrayEngine.fix_output_overlap-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.fix_output_overlap")],-1)),s[53]||(s[53]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=i("p",null,"If one of the outputs is a reduction it is important not to have overlapping loop ranges for a reduction group. This will try to correct loopranges to avoid the problems mentioned above.",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[54]||(s[54]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),i("details",F,[i("summary",null,[s[56]||(s[56]=i("a",{id:"DiskArrayEngine.generate_inbuffers-Tuple{Any, Any}",href:"#DiskArrayEngine.generate_inbuffers-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.generate_inbuffers")],-1)),s[57]||(s[57]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=i("p",null,"Creates buffers for input arrays",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[58]||(s[58]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),i("details",C,[i("summary",null,[s[60]||(s[60]=i("a",{id:"DiskArrayEngine.generate_outbuffers-Tuple{Any, Any, Any}",href:"#DiskArrayEngine.generate_outbuffers-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.generate_outbuffers")],-1)),s[61]||(s[61]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=i("p",null,"Creates buffers for all outputs, results in a tuple of Dicts holding the collection for each output",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[62]||(s[62]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),i("details",_,[i("summary",null,[s[64]||(s[64]=i("a",{id:"DiskArrayEngine.generate_raw_outbuffer-Tuple{Any, Any, Any}",href:"#DiskArrayEngine.generate_raw_outbuffer-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.generate_raw_outbuffer")],-1)),s[65]||(s[65]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=i("p",null,"Create buffer for single output",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[66]||(s[66]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),i("details",v,[i("summary",null,[s[68]||(s[68]=i("a",{id:"DiskArrayEngine.getbufsize-Tuple{Any, Any}",href:"#DiskArrayEngine.getbufsize-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.getbufsize")],-1)),s[69]||(s[69]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=i("p",null,"Determine the needed buffer size for a given Input array and loop ranges lr",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[70]||(s[70]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),i("details",w,[i("summary",null,[s[72]||(s[72]=i("a",{id:"DiskArrayEngine.length_from_chunktype-Tuple{Any}",href:"#DiskArrayEngine.length_from_chunktype-Tuple{Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.length_from_chunktype")],-1)),s[73]||(s[73]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=i("p",null,[t("Returns the length of a dimension covered by a "),i("code",null,"DiskArrays.ChunkVector"),t(" object")],-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[74]||(s[74]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),i("details",I,[i("summary",null,[s[76]||(s[76]=i("a",{id:"DiskArrayEngine.mustwrite-Tuple{DiskArrayEngine.OutArrayBuffer}",href:"#DiskArrayEngine.mustwrite-Tuple{DiskArrayEngine.OutArrayBuffer}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.mustwrite")],-1)),s[77]||(s[77]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=i("p",null,"Check if maximum number of aggregations has happened for a buffer",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[78]||(s[78]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})]),i("details",M,[i("summary",null,[s[80]||(s[80]=i("a",{id:"DiskArrayEngine.put_buffer-NTuple{4, Any}",href:"#DiskArrayEngine.put_buffer-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.put_buffer")],-1)),s[81]||(s[81]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=i("p",null,"Checks if output buffers have accumulated to the end and exports to output array",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[82]||(s[82]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[82]})]),i("details",O,[i("summary",null,[s[84]||(s[84]=i("a",{id:"DiskArrayEngine.put_buffer-Tuple{Any, Any, Nothing, Any}",href:"#DiskArrayEngine.put_buffer-Tuple{Any, Any, Nothing, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.put_buffer")],-1)),s[85]||(s[85]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[87]||(s[87]=i("p",null,"Function to finalize and remove buffers without writing to an array",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[86]||(s[86]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[86]})]),i("details",P,[i("summary",null,[s[88]||(s[88]=i("a",{id:"DiskArrayEngine.range_from_parentchunks-Tuple{Any}",href:"#DiskArrayEngine.range_from_parentchunks-Tuple{Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.range_from_parentchunks")],-1)),s[89]||(s[89]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=i("p",null,"Tests that a supplied list of parent chunks covers the same domain and returns this",-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[90]||(s[90]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[90]})]),i("details",B,[i("summary",null,[s[92]||(s[92]=i("a",{id:"DiskArrayEngine.read_range-Tuple{Any, Any, Any}",href:"#DiskArrayEngine.read_range-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"DiskArrayEngine.read_range")],-1)),s[93]||(s[93]=t()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=i("p",null,[t("Reads data from input array "),i("code",null,"ia"),t(" along domain "),i("code",null,"r"),t(" into "),i("code",null,"buffer")],-1)),n(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>s[94]||(s[94]=[i("a",{href:"https://github.com/meggart/DiskArrayEngine.jl",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[94]})])])}const $=l(d,[["render",N]]);export{L as __pageData,$ as default};
